; *startup-message*
; (setf *startup-message* (format nil "^B~A^b~&~A" (machine-instance) *startup-message*))
; *input-history*
; (run-shell-command "xfce4-panel &> /dev/null &")
; (run-shell-command "nm-applet &> /dev/null &")
; (run-shell-command "pnmixer &> /dev/null &")

; (simpletray:create)
; (run-commands "stumptray")
; (commands)
; (lastmsg)

; (get-x-selection)
; (window-number (current-window))
; (group-windows (current-group))

; swap current window with window in frame left:
; C-t x left (C-t x h)
; *last-unhandled-error*
; swap current window with window in frame right:
; C-t x right (C-t x l)
; *timer-list*
; (make-pathname :directory *home-dir*)
; (ql:quickload :ttf-fonts)
; (set-font (make-instance 'xft:font :family "Source Code Pro Black"
;                           :subfamily "Regular"
;                           :size 9))
; CPU:*ACPI-THERMAL-ZONE*
; xft:*font-dirs*
; (data-dir-file)
; *data-dir*
; *debug-stream*
; *quit-hook*
; *start-hook*
; *shell-program*
; (all-windows)
; (describe 'float-this)
; (describe (first (refresh-heads)))
; *version*
; (echo-groups (current-screen) *group-format* t)
; (set-font (list (make-instance 'xft:font :family "Source Code Pro Powerline" :subfamily "Regular" :size 22)))

(in-package :stumpwm)

(defvar *home-dir* (getenv "HOME"))

(setf *debug-level* 1)

(add-hook *quit-hook* #'(lambda () (run-shell-command "pkill redshift")))

; Same as: (set-module-dir "/home/arjen/stumpwm/contrib/")
(setf *module-dir* (make-pathname :directory
                    (format nil "~A/stumpwm/stumpwm-contrib" *home-dir*)))

(set-module-dir *module-dir*)

(defvar *vlime-instance* nil)

(defun start-vlime ()
 (unless *vlime-instance*
  (vlime:main :port 4005 :backend :vlime-usocket)
  (setf *vlime-instance* "Vlime running")))

(start-vlime)


; Turn on the modeline

;; mode line
(setf *mode-line-background-color*  "black"
      *mode-line-foreground-color*  "lightgreen"
      *mode-line-border-color* "black")


(defun modeline ()
  (if (not (head-mode-line (current-head)))
     (toggle-mode-line (current-screen) (current-head))))

;;; load modules

; (load-module "net")
; (load-module "cpu")
; (load-module "battery-portable")
; ; (load-module "ttf-fonts")
; ; (load-module "notifications")
;  ; (load-module "urgentwindows")
; ; (load-module "app-menu")
; (load-module "stumptray")
; (load-module "clipboard-history")

(mapcar #'load-module
        '("net"
          "app-menu"
          "cpu"
          "battery-portable"
          "end-session"
          "stumptray"
          "screenshot"
          "command-history"
          "clipboard-history"))

(define-key *root-map* (kbd "C-y") "show-clipboard-history")

;; start the polling timer process

(clipboard-history:start-clipboard-manager)

;; Show time, cpu usage and network traffic in the modeline
(setf *screen-mode-line-format*
      (list '(:eval (run-shell-command "date '+%R, %F %a'|tr -d [:cntrl:]" t))  ;date command
            ; " | %t" ; temperature
            " | %c" ; cpu
            " | %l" ; network
            " | Battery: %B " ; battery
            " | Groups: %g " ; groups
            ; " | [^B%n^b] %W"  ; application
            " | %W"  ; application
            " || %T"))  ; stumptray

(setf *message-window-gravity* :center)
(setf *input-window-gravity* :center)

(run-with-timer 3 10 'modeline)

; ; Wait for tray before firing stumptray
; (sb-thread:make-thread
;   (lambda ()
;     (progn
;      (sleep 10)
;      (run-commands "stumptray"))))

;;; run shell commmands

; Wait for tray before firing stumptray
(defmacro start-with-delay (seconds &body body)
  `(sb-thread:make-thread
    (lambda ()
      (progn
       (sleep ,seconds)
       ,@body))))

(start-with-delay 5
 (run-shell-command
   "feh --bg-scale $HOME/config/dotfiles/_wallpapers/groningen_station.jpg"))

(start-with-delay 10 (run-commands "stumptray"))

(run-shell-command "xscreensaver")


(stumpwm:run-shell-command "xsetroot -cursor_name left_ptr")

(setf *mouse-focus-policy* :sloppy) ;; :click, :ignore, :sloppy

;;; Mappings

(defmacro make-program-binding (command value &key (key-binding nil))
  `(progn
    (defcommand ,(intern command) ()()
       (run-or-raise ,command '(:class ,value)))
    ,(when key-binding
      `(define-key *top-map* (kbd (format nil "M-~a" ,key-binding)) ,command))))

(defcommand lock-screen ()()
            (run-shell-command "xscreensaver-command -lock"))

(make-program-binding "vlc" "vlc")
(make-program-binding "firefox" "Firefox" :key-binding "b")
(make-program-binding "arandr" "arandr")
(make-program-binding "chromium-browser" "chromium-browser")
(make-program-binding "Franz" "Franz" :key-binding "c")
(make-program-binding "spotify" "Spotify" :key-binding "m")
(make-program-binding "calibre" "calibre" :key-binding "C")

(define-key *top-map* (kbd "M-f") "exec nautilus")

(define-key *top-map* (kbd "M-s") "lock-screen")

(define-key *top-map* (kbd "M-g") "exec env XDG_CURRENT_DESKTOP=GNOME gnome-control-center")

(define-key *top-map* (kbd "M-ESC") "gother")

(define-key *top-map* (kbd "M-TAB") "next")

(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "M-RET") "exec gnome-terminal")
; (stumpwm::run-shell-command "stalonetray")

;; Web jump (works for Google and Imdb)
(defmacro make-web-jump (name prefix)
  `(defcommand ,(intern name) (search) ((:rest ,(concatenate 'string name " search: ")))
    (nsubstitute #\+ #\Space search)
    (run-shell-command (concatenate 'string ,prefix search))))

(make-web-jump "open" "firefox --new-tab ")

(make-web-jump "search" "firefox --new-tab https://www.duckduckgo.com/?q=")
(make-web-jump "duckduckgo" "firefox --new-tab https://www.duckduckgo.com/?q=")
(make-web-jump "d" "firefox --new-tab  https://www.duckduckgo.com/?q=")

(make-web-jump "google" "firefox --new-tab http://www.google.nl/search?q=")
(make-web-jump "g" "firefox --new-tab http://www.google.nl/search?q=")

(make-web-jump "github" "firefox --new-tab https://github.com/search?q=")

(make-web-jump "stackoverflow" "firefox --new-tab https://stackoverflow.com/search?q=")
(make-web-jump "so" "firefox --new-tab https://stackoverflow.com/search?q=")

(make-web-jump "wikipedia" "firefox --new-tab https://wikipedia.org/w/index.php?search=")

;;; Group thingies
(run-commands "grename browser"
              "gnewbg code"
              "gnewbg chat"
              "gnewbg documentation"
              "gnewbg media"
              "gnewbg root")

(dotimes (i 10) (format t "~A" i)
 (define-key *top-map* (kbd (format nil "M-~a" i)) (format nil "gselect ~a" i)))

(define-key *top-map* (kbd "M-Right") "gnext")
(define-key *top-map* (kbd "M-Left") "gprev")


(defcommand move-to-next-frame-with-window () ()
            "Navigate to next frame and take current window with you"
            (let ((win (current-window)))
              (fnext)
              (pull-window win)))

(defmacro create-sudo-command (defcommand command)
  `(defcommand ,defcommand () ()
     (run-shell-command
       (concatenate 'string "xterm -e sudo " ,command))))

(create-sudo-command sudo-gnome-control-center "XDG_CURRENT_DESKTOP=GNOME gnome-control-center")
(create-sudo-command sudo-dnfdragora "dnfdragora")

(defcommand shell-output (command) ((:shell "/bin/sh -c "))
  (message "~a" (run-shell-command command t)))

(define-key *top-map* (kbd "M-l") "move-to-next-frame-with-window")

; (define-key *top-map* (kbd "XF86AudioLowerVolume") "exec amixer set Master 5%-")
; (define-key *top-map* (kbd "XF86AudioRaiseVolume") "exec amixer set Master 5%+")
; (define-key *top-map* (kbd "XF86AudioMute") "exec amixer set Master toggle")

;; Clear rules
(clear-window-placement-rules)

(define-frame-preference "browser"
  ;; frame raise lock (lock AND raise == jumpto)
  (0 nil   t :class "Firefox"))

(define-frame-preference "documentation"
  ;; frame raise lock (lock AND raise == jumpto)
  (0 nil   t :title "calibre"))

(define-frame-preference "media"
  ;; frame raise lock (lock AND raise == jumpto)
  (0 nil   t :class "Spotify"))

(define-frame-preference "chat"
  ;; frame raise lock (lock AND raise == jumpto)
  (0 nil   t :class "Franz"))

(run-commands "firefox")
; (run-commands "Franz")

(run-shell-command "redshift-gtk")
(run-shell-command "pasystray")
(run-shell-command "nm-applet")

;; Pull window by id to current frame.
;; <c-t><c-id>


(setf *table*
  '(("firefox"   :command "exec firefox")
    ("terminal" :command "exec gnome-terminal")))

(defun switch-to-window (window)
  (stumpwm::switch-to-group (stumpwm::window-group window))
  (focus-window window))

(defun window-table ()
  (mapcar (lambda (w)
            (list (stumpwm::format-expand *window-formatters* "%t" w)
                  :window w))
          (stumpwm::all-windows)))

(defun otherwise-command (input)
  (run-shell-command (format nil "firefox http://google.com/~A" input)))

(defcommand stump-quick-menu () ()
  (multiple-value-bind (elt input)
      (select-from-menu (current-screen)
                        (append *table*
                                '(("--------------------" nil nil))
                                (window-table)))
    (cond (elt
           (ecase (second elt)
             ((:command)
              (stumpwm::eval-command (third elt)))
             ((:window)
              (switch-to-window (third elt)))
             ((nil))))
          ((string/= input "")
           (otherwise-command input)))))


; (define-key *top-map* (kbd "M-TAB") "windowlist")
(define-key stumpwm::*menu-map* (kbd "TAB") 'stumpwm::menu-down)
(define-key stumpwm::*menu-map* (kbd "M-TAB") 'stumpwm::menu-down)

(defun mode-line-scroll-through-windows (ml bt x y)
  "Allows scrolling through windows and groups with the mouse-wheel.
Using the left 100px of mode-line (where the group is displayed) will
scroll through the groups, while using any other part of the mode-line
will scroll through windows in the current group."
  (declare (ignore ml y))
  (cond ((>= x 100)
         (cond ((eq bt 5)
                (run-commands "next"))
               ((eq bt 4)
                (run-commands "prev"))))
        (t
         (cond ((eq bt 5)
                (run-commands "gnext"))
               ((eq bt 4)
                (run-commands "gprev"))))))

(add-hook *mode-line-click-hook* 'mode-line-scroll-through-windows)

;; vim: ft=lisp
