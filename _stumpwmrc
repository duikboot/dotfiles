(in-package :stumpwm)

(require :swank)
(swank-loader:init)

(defvar *vlime-instance* nil)

; (swank:create-server :port 4004
;                      :style swank:*communication-style*
;                      :dont-close t)

(defun start-vlime ()
  (unless *vlime-instance*
   (vlime:main :port 4005 :backend :vlime-usocket)
   (setf *vlime-instance* "Vlime running")))

(start-vlime)

; (vlime:main :port 4005 :backend :vlime-usocket)


; (message *vlime-instance*)
; (mode-line)

; Turn on the modeline
(if (not (head-mode-line (current-head)))
    (toggle-mode-line (current-screen) (current-head)))

(set-module-dir "/home/arjen/stumpwm/contrib/")

(load-module "net")
(load-module "cpu")
(load-module "battery-portable")
; (load-module "notifications")
; (load-module "urgentwindows")

; (run-shell-command "xfce4-panel &> /dev/null &")
; (run-shell-command "nm-applet &> /dev/null &")
; (run-shell-command "pnmixer &> /dev/null &")

(run-shell-command "feh --bg-center $HOME/config/dotfiles/_wallpapers/groningen_station.jpg")
(run-shell-command "xscreensaver")

(defcommand lock-screen ()()
            (run-shell-command "xscreensaver-command -lock"))

(defcommand firefox ()()
            (run-or-raise "firefox" '(:class "Firefox")))

(defcommand franz ()()
            (run-or-raise "Franz" '(:class "Franz")))

(defcommand spotify ()()
            (run-or-raise "spotify" '(:class "spotify")))

(defmacro my-run-or-raise (command value)
 `(defcommand ,(intern command) ()()
             (run-or-raise ,command '(:class ,value))))

(my-run-or-raise "vlc" "vlc")
(my-run-or-raise "firefox" "firefox")
(my-run-or-raise "arandr" "arandr")


; (stumpwm::run-shell-command "stalonetray")
; (stumpwm::run-shell-command "nm-applet")


(stumpwm:run-shell-command "xsetroot -cursor_name left_ptr")

(setf *mouse-focus-policy* :sloppy) ;; :click, :ignore, :sloppy


;; Show time, cpu usage and network traffic in the modeline
(setf *screen-mode-line-format*
      (list '(:eval (run-shell-command "date '+%R, %F %a'|tr -d [:cntrl:]" t))  ;date command
            " | %t" ; temperature
            " | %c" ; cpu
            " | %l" ; network
            " | Battery: %B " ; battery
            " | [^B%n^b] %W"))

(run-commands "grename browser")
(run-commands "gnewbg code" "gnewbg music" "gnewbg chat" "gnewbg root")

(stumpwm:define-key stumpwm:*root-map* (stumpwm:kbd "c") "exec gnome-terminal")


; (define-key *top-map* (kbd "XF86AudioLowerVolume") "exec amixer set Master 5%-")
; (define-key *top-map* (kbd "XF86AudioRaiseVolume") "exec amixer set Master 5%+")
; (define-key *top-map* (kbd "XF86AudioMute") "exec amixer set Master toggle")

(define-key *top-map* (kbd "M-b") "firefox")
(define-key *top-map* (kbd "M-f") "exec nautilus")
(define-key *top-map* (kbd "M-c") "franz")
(define-key *top-map* (kbd "M-m") "spotify")
(define-key *top-map* (kbd "M-RET") "exec gnome-terminal")

(define-key *top-map* (kbd "M-1") "gselect 1")
(define-key *top-map* (kbd "M-2") "gselect 2")
(define-key *top-map* (kbd "M-3") "gselect 3")
(define-key *top-map* (kbd "M-4") "gselect 4")
(define-key *top-map* (kbd "M-5") "gselect 5")
(define-key *top-map* (kbd "M-6") "gselect 6")
(define-key *top-map* (kbd "M-7") "gselect 7")
(define-key *top-map* (kbd "M-8") "gselect 8")
(define-key *top-map* (kbd "M-9") "gselect 9")
(define-key *top-map* (kbd "M-s") "lock-screen")

(define-key *top-map* (kbd "M-g") "exec gnome-control-center")

(define-key *top-map* (kbd "M-ESC") "gother")

;; Pull window by id to current frame.
;; <c-t><c-id>

(defun echo-urgent-window (target)
  "modified message-window.lisp to export message-no-timeout"
  (stumpwm::message-no-timeout "Activity in ~a"
            (window-title target) (window-group target)))

; (defun echo-urgent-window ()
;   "modified message-window.lisp to export message-no-timeout"
;   (stumpwm::message-no-timeout "Activity in window"))

; *urgent-window-hook*

; (remove-hook *urgent-window-hook* 'echo-urgent-window)

(add-hook *urgent-window-hook* 'echo-urgent-window)

; (stumpwm::message-no-timeout "TEST")

;; vim: ft=lisp
