(in-package :stumpwm)


(require :swank)
(swank-loader:init)

(defvar *home-dir* (getenv "HOME"))

; Same as: (set-module-dir "/home/arjen/stumpwm/contrib/")
(setf *module-dir* (make-pathname :directory
                                  (format nil "~A/stumpwm/contrib" *home-dir*)))

(set-module-dir *module-dir*)

(defvar *vlime-instance* nil)

; (swank:create-server :port 4004
;                      :style swank:*communication-style*
;                      :dont-close t)


(defun start-vlime ()
 (unless *vlime-instance*
  (vlime:main :port 4005 :backend :vlime-usocket)
  (setf *vlime-instance* "Vlime running")))

(start-vlime)

; Turn on the modeline
(if (not (head-mode-line (current-head)))
    (toggle-mode-line (current-screen) (current-head)))

(load-module "net")
(load-module "cpu")
(load-module "battery-portable")
; (load-module "notify")
; (load-module "notifications")
; (load-module "urgentwindows")

; (run-shell-command "xfce4-panel &> /dev/null &")
; (run-shell-command "nm-applet &> /dev/null &")
; (run-shell-command "pnmixer &> /dev/null &")

(run-shell-command "feh --bg-center $HOME/config/dotfiles/_wallpapers/groningen_station.jpg")
(run-shell-command "xscreensaver")

(stumpwm:run-shell-command "xsetroot -cursor_name left_ptr")

(setf *mouse-focus-policy* :sloppy) ;; :click, :ignore, :sloppy

;;; Mappings

(defmacro make-program-binding (command value &key (key-binding nil))
  `(progn
    (defcommand ,(intern command) ()()
       (run-or-raise ,command '(:class ,value)))
    ,(when key-binding
      `(define-key *top-map* (kbd (format nil "M-~a" ,key-binding)) ,command))))

(defcommand lock-screen ()()
            (run-shell-command "xscreensaver-command -lock"))

(make-program-binding "vlc" "vlc")
(make-program-binding "firefox" "Firefox" :key-binding "b")
(make-program-binding "arandr" "arandr")
(make-program-binding "Franz" "Franz" :key-binding "c")
(make-program-binding "spotify" "Spotify" :key-binding "m")
(make-program-binding "calibre" "calibre" :key-binding "C")

(define-key *top-map* (kbd "M-f") "exec nautilus")

(define-key *top-map* (kbd "M-s") "lock-screen")

(define-key *top-map* (kbd "M-g") "exec gnome-control-center")

(define-key *top-map* (kbd "M-ESC") "gother")

; (stumpwm::run-shell-command "stalonetray")
; (stumpwm::run-shell-command "nm-applet")


(run-commands "grename browser")
(run-commands "gnewbg code" "gnewbg music" "gnewbg chat" "gnewbg root")

(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "M-RET") "exec gnome-terminal")


; (define-key *top-map* (kbd "XF86AudioLowerVolume") "exec amixer set Master 5%-")
; (define-key *top-map* (kbd "XF86AudioRaiseVolume") "exec amixer set Master 5%+")
; (define-key *top-map* (kbd "XF86AudioMute") "exec amixer set Master toggle")

(dotimes (i 10) (format t "~A" i)
 (define-key *top-map* (kbd (format nil "M-~a" i)) (format nil "gselect ~a" i)))


;; Show time, cpu usage and network traffic in the modeline
(setf *screen-mode-line-format*
      (list '(:eval (run-shell-command "date '+%R, %F %a'|tr -d [:cntrl:]" t))  ;date command
            " | %t" ; temperature
            " | %c" ; cpu
            " | %l" ; network
            " | Battery: %B " ; battery
            " | [^B%n^b] %W"))


;; Pull window by id to current frame.
;; <c-t><c-id>

;; vim: ft=lisp
