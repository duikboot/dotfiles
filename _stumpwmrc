; #+test-modeline
; (mode-line)

(ql:quickload '(bordeaux-threads log4cl split-sequence drakma))
(in-package :stumpwm)

; TODO (arjen)
; 15-03-2021
; vertical resize command

; ;;;; TODO: remove when newer version of SBCL is installed
; (defun input-insert-char (input char)
;   "Insert @var{char} into the input at the current
; position. @var{input} must be of type @var{input-line}. Input
; functions are passed this structure as their first argument."
;   (vector-push-extend #\_ (input-line-string input))
;   ; (replace (input-line-string input) (input-line-string input)
;   ;          :start2 (input-line-position input) :start1 (1+ (input-line-position input)))
;   (replace (input-line-string input) (copy-seq (input-line-string input))
;            :start1 (1+ (input-line-position input))
;            :start2 (input-line-position input))
;   (setf (char (input-line-string input) (input-line-position input)) char)
;   (incf (input-line-position input)))
; (find-group (current-screen) "browser")

(defvar *init-load* t)

(defparameter *stumptray-apps*
  '(
    "pasystray"
    "numlockx"
    "nm-applet --sm-disable"
    "blueman-applet"))
    ; "octopi-notifier"

; (require :SB-ROTATE-BYTE)
; (ql:quickload "xml-emitter")
; (ql:quickload "cffi-grovel")
; (ql:quickload "dbus")
; (load-module "notify")
; (notify:notify-server-toggle)
; (setf notify:*notify-server-title-color* "^7")
; (setf notify:*notify-server-body-color* "^7")
; *colors*

(defun start-apps ()
  (mapc (lambda (app)
          (sleep .1)
          (log:info "killing ~A" app)
          (run-shell-command (format nil "pkill ~A" app))
          (sleep .4)
          (log:info "starting ~A" app)
          (run-shell-command app))
        *stumptray-apps*))

; (layout-laptop)
; (layout-home-screen)
; (set-wallpaper)
; hide windows (flear)


(defun enable-mode-line-all-heads ()
  (dolist (screen *screen-list*)
    (dolist (head (screen-heads screen))
      (enable-mode-line screen head t))))

; (enable-mode-line-all-heads)
; *startup-message*
; *input-history*
; *honor-window-moves*
; *mode-line-timeout*
; (run-shell-command "xfce4-panel &> /dev/null &")
; (run-shell-command "nm-applet &> /dev/null &")
; (run-shell-command "pnmixer &> /dev/null &")
; (command-history::save-input-history)
; (command-history::load-input-history)
; *input-history-ignore-duplicates*
; *features*
; (balance-frames)
; *all-modifiers*
; *modifiers*

; (list-modules)

; (restart-hard)
; (restart-soft)
; (getenv "GDK_CORE_DEVICE_EVENTS")

; (xft:get-font-families)
; (xft:cache-fonts)
; (commands)
; (lastmsg)
; (quit)

; (get-x-selection)
; (window-group (current-window))
; (group-windows (current-group))
; (tile-group-current-frame (current-group))

; swap current window with window in frame left:
; C-t x left (C-t x h)
; swap current window with window in frame right:
; C-t x right (C-t x l)
; *last-unhandled-error*
; *timer-list*
; (make-pathname :directory *home-dir*)
; *data-dir*
; *debug-stream*
; *quit-hook*
; *start-hook*
; *shell-program*
; (getenv "USER")
; (all-windows)
; (describe 'float-this)
; (describe 'fclear)
; *version*
; (echo-groups (current-screen) *group-format* t)


(set-prefix-key (kbd "C-space"))
;
(setf *startup-message* (format nil "Version: ~A" *version*))

(defvar *home-dir* (getenv "HOME"))

(defun cleanup-path ()
  (let ((paths (split-sequence:split-sequence #\: (getenv "PATH"))))
    (sort (remove-duplicates paths :test #'string=) #'string<)))

(cleanup-path)

(defun remove-duplicates-from-path ()
  (let ((paths (split-sequence:split-sequence #\: (getenv "PATH"))))
    (remove-duplicates paths :test #'string=)))

;(remove-duplicates-from-path)

(setf *debug-level* 0)

(setf *debug-stream* (open "~/.stumpwm.d/debug-output.txt"
                        :direction :output
                        :if-exists :supersede))
; (redirect-all-output (data-dir-file "debug-output" "txt"))

; (add-hook *quit-hook* #'(lambda () (run-shell-command "pkill redshift")))

; Same as: (set-module-dir "/home/arjen/stumpwm/contrib/")
(setf *module-dir* (make-pathname :directory
                    (format nil "~A/stumpwm/stumpwm-contrib" *home-dir*)))
(setf *wallpapers* (make-pathname :directory
                     (format nil "~A/Wallpapers" *home-dir*)))

(set-module-dir *module-dir*)

(defvar *vlime-instance* nil)

(defmacro start-with-delay (seconds &body body)
  "Wait with executing command with x seconds."
  `(sb-thread:make-thread
    (lambda ()
      (progn
       (sleep ,seconds)
       ,@body))))

(defmacro make-program-binding (command value &key (key-binding nil))
  `(progn
    (defcommand ,(intern command) ()()
       (run-or-raise ,command '(:class ,value)))
    ,(when key-binding
      `(define-key *top-map* (kbd (format nil "M-~a" ,key-binding)) ,command))))


(defvar *xterm-font* "Hack"
  "The name of the font to use for xterm.")

(defvar *xterm-font-pt* 12
  "The font size to call xterm with.")

(defcommand xterm (&optional additional-argstr) ()
  "Call xterm with a couple of settings arguments."
  (run-shell-command
   (concatenate 'string
                "xterm -fa '" *xterm-font* "'"
                " " "-fs " (format nil "~D" *xterm-font-pt*)
                " " additional-argstr)))

;; Web jump (works for Google and Imdb)
(defmacro make-web-jump (name prefix)
  `(defcommand ,(intern name) (search) ((:rest ,(concatenate 'string name " search: ")))
    (nsubstitute #\+ #\Space search)
    (run-shell-command (concatenate 'string ,prefix search))))

(defmacro create-sudo-command (defcommand command)
  `(defcommand ,defcommand () ()
     (run-shell-command
       (concatenate 'string "xterm -e sudo " ,command))))

(create-sudo-command package-manager "pamac-manager")
(create-sudo-command manjaro-settings-manager "manjaro-settings-manager")

(defun wallpaper ()
  (let ((files (uiop:directory-files *wallpapers*)))
    (run-shell-command
      (concatenate 'string "feh --bg-scale " (namestring (random-elt files))))))

(defun start-vlime ()
 (unless *vlime-instance*
   (handler-case
       (vlime:main :port 4005 :backend :vlime-usocket)
     (error (c)
       (message "~A" c))))
 (setf *vlime-instance* "Vlime running"))

(start-vlime)

;; mode line
(setf *mode-line-background-color*  "gray"
      *mode-line-foreground-color*  "Black"
      *mode-line-border-color* "black"
      *mode-line-timeout* 2)

(setf *window-border-style*  :thick
      *normal-border-width*  1
      *maxsize-border-width* 1)


(defun modeline ()
  (if (not (head-mode-line (current-head)))
     (toggle-mode-line (current-screen) (current-head))))

;;; load modules

(mapcar #'load-module
        '("net"
         ;   "app-menu"
          "cpu"
          "swm-gaps"
          "battery-portable"
          ;"desktop-entry"
          "end-session"
          "stumptray"
          "screenshot"
          "globalwindows"
          "command-history"
          "notify"
          "shell-command-history"
          "clipboard-history"))

; (load-module "notify")
; (notify:notify-server-toggle)
(setf notify:*notify-server-title-color* "^7")
(setf notify:*notify-server-body-color* "^7")

(defun notify::show-notification (app icon summary body)
  (declare (ignore icon))
  (message "[~A] ~A~%~A" app summary body))

(defvar *entry-paths*
  '(#P"/usr/share/applications"
    #P"~/.local/share/applications"))


(setf *input-history-ignore-duplicates* t)


(define-key *root-map* (kbd "C-y") "show-clipboard-history")

(defcommand xcape ()()
  (run-shell-command "pkill xcape")
  (run-shell-command "xcape -t 200 -e \"Shift_L=parenleft;Shift_R=parenright\"")
  (run-shell-command "xcape"))

(defcommand xmodmap ()()
  (log:info "Xmodmap")
  (run-shell-command "xmodmap ~/.Xmodmap"))

(defcommand set-touchpad ()()
  (run-shell-command "xinput set-prop \"SynPS/2 Synaptics TouchPad\" \"libinput Tapping Enabled\" 1"))

(defcommand set-keyboard ()()
  (xcape)
  (unless (string-match (run-shell-command "hostname" t) "arjen-latitude5530")
    (log:info "Not arjen-latitude5530")
    (set-touchpad))
  (xmodmap))

;; (defcommand set-keyboard ()()
;;   (run-shell-command "setxkbmap -option caps:swapescape")
;;   (run-shell-command "setxkbmap -option compose:ralt")
;;   (run-shell-command "setxkbmap -option ctrl:nocaps")
;;   (run-shell-command "setxkbmap -option altwin:swap_alt_win")
;;   (run-shell-command "setxkbmap -option altwin:meta_alt")
;;   (run-shell-command "setxkbmap -option altwin:menu_win")
;;   (run-shell-command "setxkbmap -option altwin:swap_lalt_lwin"))


(defun refresh ()
  (log:info "Refresh heads")
  ;; (xcape)
  (refresh-heads)
  (sleep 0.1)
  (set-wallpaper)
  (notify:notify-server-on)
  (refresh-heads)
  (message "Refresh heads"))

(defcommand refresh-monitors ()()
  (refresh))

(define-key *root-map* (kbd "m") "refresh-monitors")

;; start the polling timer process

(clipboard-history:start-clipboard-manager)

;; Show time, cpu usage and network traffic in the modeline
(setf *screen-mode-line-format*
      (list '(:eval (run-shell-command "date '+%R, %F %a'|tr -d [:cntrl:]" t))  ;date command
            ; " | %t" ; temperature
            ; " | %C  " ; cpu
            " | %l" ; network
            " | Battery: %B " ; battery
            " | Groups: %g " ; groups
            " | %W"  ; application
            " || %T"))  ; stumptray

(setf *message-window-gravity* :center)
(setf *input-window-gravity* :center)

(setf swm-gaps:*inner-gaps-size* 5)
(setf swm-gaps:*outer-gaps-size* 5)
; (swm-gaps:toggle-gaps)

(defparameter *layouts* (make-hash-table :test #'eql))

(defcommand toggle-full-layout () ()
  (let* ((gnum (group-number (current-group)))
         (currlay (gethash gnum *layouts*)))
    (if currlay
      (progn
        (restore-group (current-group) currlay)
        (setf (gethash gnum *layouts*) nil))
      (progn
        (setf (gethash gnum *layouts*) (dump-group (current-group)))
        (run-commands "only")))))

(define-key *top-map* (kbd "M-0") "toggle-full-layout")

(run-shell-command "hostname" t)

(defun get-datetime-string ()
  (string-trim '(#\Space #\Tab #\Newline) (run-shell-command "date +%F-%H%M%S" t)))

(defcommand timestamp-screenshot () ()
  (let ((filename (format nil "~A/screenshots/~d.png" *home-dir* (get-datetime-string))))
    (screenshot:screenshot filename)
    (message "Screenshot ~A saved" filename)))

(define-key *top-map* (kbd "SunPrint_Screen") "timestamp-screenshot")

; (load "~/config/bookmarks")
(defparameter *bookmarks-url* "http://localhost:5000/api/1/bookmark/add/")
(defparameter *bookmarks-api-key* "123456")
(defparameter *bookmarks-url* (getenv "BOOKMARK_API"))
(defparameter *bookmarks-api-key* (getenv "BOOKMARK_API_KEY"))

(defun bookmarkpage-in-cl-duikboot (tags)
  (let ((req
    (drakma:http-request
      *bookmarks-url*
      :method :post
      :parameters
      `(("url" . ,(run-shell-command "xclip -o -selection clipboard" t))
        ("api-key" . ,*bookmarks-api-key*)
        ("tags" . ,(if (string= tags "")
                      "from-api"
                      tags))))))
    (log:info req)))

(defcommand enlarge-frame () ()
  (resize 50 0)
  (message "enlarged"))

(defcommand bookmark-page (tags)((:string "Tags: "))
  (window-send-string "yy")
  (start-with-delay 1 (bookmarkpage-in-cl-duikboot tags)))

(defcommand timestamp-screenshot () ()
  (let ((filename (format nil "~A/screenshots/~d.png" *home-dir* (get-datetime-string))))
    (screenshot:screenshot filename)
    (message "Screenshot ~A saved" filename)))


;;; run shell commands

(defun search-thread (needle)
  (find-if (lambda (th)
              (search needle (bt:thread-name th)))
         (bt:all-threads)))

(defun kill-thread (thread)
  (bt:destroy-thread thread))

(defun set-wallpaper ()
  (let ((message ""))
    (handler-case
        (progn
          (kill-thread (search-thread "wallpaper"))
          (setf message (format nil "Killing wallpaper thread")))
      (error ()
        (setf message (format nil "No thead wallpaper running"))))
    (sb-thread:make-thread
      (lambda ()
        (progn
          (loop
             (wallpaper)
             (sleep (* 30 60)))))
      :name "wallpaper")
    (setf message (concatenate 'string message (format nil "~%New wallpaper set")))
    (message message)))

(defun send-notification (message icon)
  (run-shell-command
    (concatenate 'string "notify-send --expire-time=2000 --icon=" icon " \"" message "\"")))

(defun spotify-wallpaper (url)
  (run-shell-command
    (concatenate 'string "feh --bg-scale " url)))

(defun parse-acpi (acpi)
  (let ((battery (split-sequence:split-sequence
                   #\,
                   (second (split-sequence:split-sequence #\: acpi)))))
    (parse-integer (second battery) :junk-allowed t)))


(defun send-battery-low-notification ()
  (let ((battery (run-shell-command "acpi -b" t)))
    (when (search "Discharging" battery)
      (let ((percentage (parse-acpi battery)))
        (cond
          ((<= percentage 5)
           (send-notification (format nil "Battery empty~%~A%" percentage) "battery-empty"))
          ((<= percentage 10)
           (send-notification (format nil "Battery empty~%~A%" percentage) "battery-low"))
          ((and (<= percentage 20) (= (mod percentage 5) 0))
           (send-notification (format nil "Battery empty~%~A%" percentage) "battery-low"))
          ((and (<= percentage 50) (= (mod percentage 10) 0))
           (send-notification (format nil "Battery empty~%~A%" percentage) "battery-caution")))))))

; (send-notification (format nil "Battery empty~%~A%" 13) "battery-empty")

(defun create-background-battery-thread ()
    (handler-case
        (progn
          (kill-thread (search-thread "battery"))
          (message (format nil "Killing battery thread")))
      (error ()
        (message (format nil "No thead battery running"))))
  (sb-thread:make-thread
    (lambda ()
      (loop
         (send-battery-low-notification)
         (sleep (* 5 60))))
    :name "battery"))

;; (create-background-battery-thread)

(run-shell-command "xscreensaver -no-splash")
(stumpwm:run-shell-command "xsetroot -cursor_name left_ptr")

(setf *mouse-focus-policy* :click) ;; :click, :ignore, :sloppy

;;; Mappings

(make-program-binding "vlc" "vlc")
(make-program-binding "firefox" "Firefox" :key-binding "b")
(make-program-binding "arandr" "arandr")
(make-program-binding "chromium" "chromium")
(make-program-binding "rambox" "Rambox" :key-binding "c")
(make-program-binding "slack" "Slack")
(make-program-binding "telegram-desktop" "Telegram")
(make-program-binding "spotify" "Spotify" :key-binding "m")
(make-program-binding "calibre" "calibre" :key-binding "C")
(make-program-binding "keepassxc" "keepassxc")

(defcommand lock-screen ()()
            (notify:notify-server-off)
            (run-shell-command "xscreensaver-command -lock"))

(defcommand suspend ()()
            (run-shell-command "systemctl suspend" t))

(define-key *top-map* (kbd "M-f") "exec thunar")

(define-key *top-map* (kbd "M-s") "lock-screen")

(define-key *top-map* (kbd "M-g") "exec env XDG_CURRENT_DESKTOP=GNOME gnome-control-center")

(define-key *top-map* (kbd "M-ESC") "gother")

(define-key *top-map* (kbd "M-TAB") "next")

(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "M-RET") "exec gnome-terminal")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "M-RET") "exec xfce4-terminal")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "M-RET") "exec alacritty")
; (stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "M-RET") "exec kitty")
; (stumpwm::run-shell-command "stalonetray")

(make-web-jump "open" "firefox --new-tab ")

(make-web-jump "search" "firefox --new-tab https://www.duckduckgo.com/?q=")
(make-web-jump "duckduckgo" "firefox --new-tab https://www.duckduckgo.com/?q=")
(make-web-jump "ddg" "firefox --new-tab  https://www.duckduckgo.com/?q=")

(make-web-jump "twitter" "firefox --new-tab https://twitter.com/search?q=")

(make-web-jump "google" "firefox --new-tab https://www.google.nl/search?q=")
(make-web-jump "g" "firefox --new-tab https://www.google.nl/search?q=")
(make-web-jump "translate" "firefox --new-tab https://translate.google.com/?q=")

(make-web-jump "github" "firefox --new-tab https://github.com/search?q=")

(make-web-jump "stackoverflow" "firefox --new-tab https://stackoverflow.com/search?q=")
(make-web-jump "so" "firefox --new-tab https://stackoverflow.com/search?q=")

(make-web-jump "youtube" "firefox --new-tab https://www.youtube.com/results?search_query=")
(make-web-jump "yt" "firefox --new-tab https://www.youtube.com/results?search_query=")

(make-web-jump "wikipedia" "firefox --new-tab https://wikipedia.org/w/index.php?search=")

;;; Group thingies
(run-commands "grename browser"
              "gnewbg code"
              "gnewbg chat"
              "gnewbg documentation"
              "gnewbg media"
              "gnewbg root")

(dotimes (i 10)
  (when (> i 0)
    (format t "~A" i)
    (define-key *top-map* (kbd (format nil "M-~a" i)) (format nil "gselect ~a" i))))

(define-key *top-map* (kbd "M-Right") "gnext")
(define-key *top-map* (kbd "M-Left") "gprev")


(defcommand move-to-next-frame-with-window () ()
            "Navigate to next frame and take current window with you"
            (let ((win (current-window)))
              (fnext)
              (ignore-errors (pull-window win))))

(create-sudo-command sudo-gnome-control-center "XDG_CURRENT_DESKTOP=GNOME gnome-control-center")
;; (create-sudo-command sudo-dnfdragora "dnfdragora")

(defcommand shell-output (command) ((:shell "/bin/sh -c "))
  (message "~a" (run-shell-command command t)))

;; (defun adjust-brightness (side percent)
;;   "Use acpilight as a standin for backlight."
;;   (run-shell-command (format nil "xbacklight -~a ~a" side percent))
;;   (let ((brightness (run-shell-command (format nil "xbacklight -get") t)))
;;     (message (format nil "xbacklight set to ~a" brightness))))
;;
(defun adjust-brightness (n)
  "Use acpilight as a standin for backlight."
  ;; (message (format nil "brightnessctl -d \"intel_backlight\" s ~a" n))
  (run-shell-command (format nil "brightnessctl -d \"intel_backlight\" s ~a" n))
  (let ((brightness (run-shell-command (format nil "brightnessctl -d \"intel_backlight\" g") t)))
    (message (format nil "brightness set to ~a" brightness))))


(defcommand temp-up ()()
  (adjust-brightness "5%+"))

(defcommand temp-down ()()
  (adjust-brightness "5%-"))

(define-key *top-map* (kbd "M-+") "temp-up")
(define-key *top-map* (kbd "M--") "temp-down")

(defun ssh (host)
    (run-shell-command
      (concatenate 'string "xfce4-terminal -x ssh " host)))

(defun ssh-host-list (hosts)
  (mapcar (lambda (x) (list (second x)
                            (second x)))
          (mapcar (lambda (y)
                    (split-sequence:split-sequence #\Space y))
                  hosts)))

(defun read-ssh-config ()
  "Read .ssh/config and remove every line that doesn't start with Host"
  (let ((sshconfig (uiop:read-file-lines "~/.ssh/config")))
    (remove-if-not
      (lambda (x)
        (string= "Host"
                (first
                  (split-sequence:split-sequence #\Space x)))) sshconfig)))


(defcommand ssh-menu () ()
  (let ((ssh-host (select-from-menu
                    (current-screen)
                    (ssh-host-list (sort (read-ssh-config) #'string<)))))
    (ssh (first ssh-host))))


(define-key *top-map* (kbd "M-l") "move-to-next-frame-with-window")
(define-key *top-map* (kbd "M-=") "balance-frames")

(defcommand mute-sound () ()
  "Mute sound."
  (run-shell-command  "amixer set Master toggle"))

(define-key *top-map* (kbd "XF86AudioLowerVolume") "exec amixer set Master 5%-")
(define-key *top-map* (kbd "XF86AudioRaiseVolume") "exec amixer set Master 5%+")
(define-key *top-map* (kbd "XF86AudioMute") "mute-sound")

;; Clear rules
(clear-window-placement-rules)

(define-frame-preference "browser"
  ;; frame raise lock (lock AND raise == jumpto)
  (0 nil   t :title "Firefox"))

(define-frame-preference "documentation"
  ;; frame raise lock (lock AND raise == jumpto)
  (0 nil   t :title "calibre"))

(define-frame-preference "media"
  ;; frame raise lock (lock AND raise == jumpto)
  (0 nil   t :title "Spotify"))

(define-frame-preference "chat"
  ;; frame raise lock (lock AND raise == jumpto)
  (0 nil   t :title "Rambox")
  (0 nil   t :title "Slack"))


; (run-shell-command "redshift-gtk")
;; Pull window by id to current frame.
;; <c-t><c-id>


(setf *table*
  '(("firefox"  :command "exec firefox")
    ("terminal" :command "exec gnome-terminal")))

(defun switch-to-window (window)
  (stumpwm::switch-to-group (stumpwm::window-group window))
  (focus-window window))

(defun window-table ()
  (mapcar (lambda (w)
            (list (stumpwm::format-expand *window-formatters* "%t" w)
                  :window w))
          (stumpwm::all-windows)))

(defun otherwise-command (input)
  (run-shell-command (format nil "firefox http://google.com/~A" input)))

(defcommand stump-quick-menu () ()
  (multiple-value-bind (elt input)
      (select-from-menu (current-screen)
                        (append *table*
                                '(("--------------------" nil nil))
                                (window-table)))
    (cond (elt
           (ecase (second elt)
             ((:command)
              (stumpwm::eval-command (third elt)))
             ((:window)
              (switch-to-window (third elt)))
             ((nil))))
          ((string/= input "")
           (otherwise-command input)))))


; (define-key *top-map* (kbd "M-TAB") "windowlist")
(define-key stumpwm::*menu-map* (kbd "TAB") 'stumpwm::menu-down)
(define-key stumpwm::*menu-map* (kbd "M-TAB") 'stumpwm::menu-down)

(defun mode-line-scroll-through-windows (ml bt x y)
  "Allows scrolling through windows and groups with the mouse-wheel.
Using the left 100px of mode-line (where the group is displayed) will
scroll through the groups, while using any other part of the mode-line
will scroll through windows in the current group."
  (declare (ignore ml y))
  (cond ((>= x 100)
         (cond ((eq bt 5)
                (run-commands "next"))
               ((eq bt 4)
                (run-commands "prev"))))
        (t
         (cond ((eq bt 5)
                (run-commands "gnext"))
               ((eq bt 4)
                (run-commands "gprev"))))))

(add-hook *mode-line-click-hook* 'mode-line-scroll-through-windows)

(defvar *screen-layout-directory* "~/.screenlayout/")

(defun get-screens ()
  (let* ((screen-layouts (run-shell-command (format nil "ls ~A" *screen-layout-directory*) t))
         (layouts
           (remove-if (lambda (x) (string= x ""))
             (split-sequence:split-sequence #\Newline screen-layouts))))
     (mapcar (lambda (x) (format nil "~A~A" *screen-layout-directory* x)) layouts)))

(defcommand screen-layout-menu () ()
  (let ((selection (select-from-menu
                      (current-screen)
                      (get-screens))))
    (run-shell-command (first selection))
    (refresh)))

(defun float-dialogs-hook (win)
  (let ((grp (current-group)))
    (when (and (not (typep grp 'float-group))
               (or
                (eq (window-type win) :dialog)
                (string-match (window-res win) "pinentry-gtk-2")))
      (float-window win grp)
      (focus-window win t))))

(add-hook *new-window-hook* #'float-dialogs-hook)
(when *init-load*
  (progn
    (mode-line)
    (sleep 1)
    (log:info "loading stumptray")
    (run-commands "stumptray")
    (sleep .1)
    (start-apps)
    (refresh)
    (create-background-battery-thread)
    (notify:notify-server-on)
    (run-shell-command "firefox")))

;; (ql:quickload '(clim slim))
;; (load-module "clim-mode-line")
;; (clim-mode-line:app-main)
;; (kill-thread (search-thread "CLIM-MODE-LINE"))
;; (kill-thread (search-thread "CLIM"))

(setf *init-load* nil)

; vim: ft=lisp
