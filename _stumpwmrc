(in-package :stumpwm)

; *startup-message*
; (setf *startup-message* (format nil "^B~A^b~&~A" (machine-instance) *startup-message*))
; *input-history*
; (run-shell-command "xfce4-panel &> /dev/null &")
; (run-shell-command "nm-applet &> /dev/null &")
; (run-shell-command "pnmixer &> /dev/null &")
; (swank:create-server :port 4004
;                      :style swank:*communication-style*
;                      :dont-close t)
; (require :swank)
; (swank-loader:init)

; (get-x-selection)
; (window-number (current-window))
; (describle current-group)

; swap current window with window in frame left:
; C-t x left (C-t x h)
; *last-unhandled-error*
; swap current window with window in frame right:
; C-t x right (C-t x l)
; *timer-list*
; (make-pathname :directory *home-dir*)
; (ql:quickload :ttf-fonts)
; (set-font (make-instance 'xft:font :family "Source Code Pro Black"
;                           :subfamily "Regular"
;                           :size 9))

; xft:*font-dirs*

(defvar *home-dir* (getenv "HOME"))

; Same as: (set-module-dir "/home/arjen/stumpwm/contrib/")
(setf *module-dir* (make-pathname :directory
                    (format nil "~A/stumpwm/contrib" *home-dir*)))

(set-module-dir *module-dir*)

(defvar *vlime-instance* nil)

(defun start-vlime ()
 (unless *vlime-instance*
  (vlime:main :port 4005 :backend :vlime-usocket)
  (setf *vlime-instance* "Vlime running")))

(start-vlime)

; Turn on the modeline
(defun modeline ()
  (if (not (head-mode-line (current-head)))
     (toggle-mode-line (current-screen) (current-head))))

;;; load modules

; (load-module "net")
; (load-module "cpu")
; (load-module "battery-portable")
; ; (load-module "ttf-fonts")
; ; (load-module "notifications")
;  ; (load-module "urgentwindows")
; ; (load-module "app-menu")
; (load-module "stumptray")
; (load-module "clipboard-history")
(mapcar #'load-module
        '("net"
          "cpu"
          "battery-portable"
          "stumptray"
          "clipboard-history"))

(define-key *root-map* (kbd "C-y") "show-clipboard-history")

;; start the polling timer process

(clipboard-history:start-clipboard-manager)

;; Show time, cpu usage and network traffic in the modeline
(setf *screen-mode-line-format*
      (list '(:eval (run-shell-command "date '+%R, %F %a'|tr -d [:cntrl:]" t))  ;date command
            ; " | %t" ; temperature
            " | %c" ; cpu
            " | %l" ; network
            " | Battery: %B " ; battery
            " | Groups: %g " ; groups
            " | [^B%n^b] %W"  ; application
            " || %T"))  ; stumptray

(setf *message-window-gravity* :center)
(setf *input-window-gravity* :center)

(run-with-timer 5 10 'modeline)
(run-commands "stumptray")

;;; run shell commmands

(run-shell-command "feh --bg-center $HOME/config/dotfiles/_wallpapers/groningen_station.jpg")
(run-shell-command "xscreensaver")
(run-shell-command "redshift-gtk")

(stumpwm:run-shell-command "xsetroot -cursor_name left_ptr")

(setf *mouse-focus-policy* :sloppy) ;; :click, :ignore, :sloppy

;;; Mappings

(defmacro make-program-binding (command value &key (key-binding nil))
  `(progn
    (defcommand ,(intern command) ()()
       (run-or-raise ,command '(:class ,value)))
    ,(when key-binding
      `(define-key *top-map* (kbd (format nil "M-~a" ,key-binding)) ,command))))

(defcommand lock-screen ()()
            (run-shell-command "xscreensaver-command -lock"))

(make-program-binding "vlc" "vlc")
(make-program-binding "firefox" "Firefox" :key-binding "b")
(make-program-binding "arandr" "arandr")
(make-program-binding "Franz" "Franz" :key-binding "c")
(make-program-binding "spotify" "Spotify" :key-binding "m")
(make-program-binding "calibre" "calibre" :key-binding "C")

(define-key *top-map* (kbd "M-f") "exec nautilus")

(define-key *top-map* (kbd "M-s") "lock-screen")

(define-key *top-map* (kbd "M-g") "exec gnome-control-center")

(define-key *top-map* (kbd "M-ESC") "gother")

(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "M-RET") "exec gnome-terminal")
; (stumpwm::run-shell-command "stalonetray")
; (stumpwm::run-shell-command "nm-applet")

;; Web jump (works for Google and Imdb)
(defmacro make-web-jump (name prefix)
  `(defcommand ,(intern name) (search) ((:rest ,(concatenate 'string name " search: ")))
    (nsubstitute #\+ #\Space search)
    (run-shell-command (concatenate 'string ,prefix search))))

(make-web-jump "open" "firefox --new-tab ")

(make-web-jump "google" "firefox --new-tab http://www.google.nl/search?q=")
(make-web-jump "g" "firefox --new-tab http://www.google.nl/search?q=")

(make-web-jump "github" "firefox --new-tab https://github.com/search?q=")

(make-web-jump "stackoverflow" "firefox --new-tab https://stackoverflow.com/search?q=")
(make-web-jump "so" "firefox --new-tab https://stackoverflow.com/search?q=")

(make-web-jump "wikipedia" "firefox --new-tab https://wikipedia.org/w/index.php?search=")

;;; Group thingies
(run-commands "grename browser")
(run-commands "gnewbg code" "gnewbg music" "gnewbg chat" "gnewbg documentation"
              "gnewbg root")

(dotimes (i 10) (format t "~A" i)
 (define-key *top-map* (kbd (format nil "M-~a" i)) (format nil "gselect ~a" i)))

(define-key *top-map* (kbd "M-Right") "gnext")
(define-key *top-map* (kbd "M-Left") "gprev")


(defcommand move-to-next-frame-with-window () ()
            "Navigate to next frame and take current window with you"
            (let ((win (current-window)))
              (fnext)
              (pull-window win)))

(define-key *top-map* (kbd "M-l") "move-to-next-frame-with-window")

; (define-key *top-map* (kbd "XF86AudioLowerVolume") "exec amixer set Master 5%-")
; (define-key *top-map* (kbd "XF86AudioRaiseVolume") "exec amixer set Master 5%+")
; (define-key *top-map* (kbd "XF86AudioMute") "exec amixer set Master toggle")



;; Pull window by id to current frame.
;; <c-t><c-id>

;; vim: ft=lisp
